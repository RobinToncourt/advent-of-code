#![allow(dead_code)]

trait Keypad {
    fn get_digit(&self) -> char;
    fn go_up(&mut self);
    fn go_down(&mut self);
    fn go_left(&mut self);
    fn go_right(&mut self);
}

struct KeypadV1 {
    x: u8,
    y: u8,
}

impl KeypadV1 {
    fn new() -> Self {
        Self {
            x: 1,
            y: 1,
        }
    }
}

impl Keypad for KeypadV1 {
    fn get_digit(&self) -> char {
        let str = self.x.to_string() + &self.y.to_string();
        
        match str.as_str() {
            "00" => '1',
            "10" => '2',
            "20" => '3',
            
            "01" => '4',
            "11" => '5',
            "21" => '6',
            
            "02" => '7',
            "12" => '8',
            "22" => '9',
            
            _ => '0',
        }
    }
    
    fn go_up(&mut self) {
        if self.y > 0 {
            self.y -= 1;
        }
    }
    
    fn go_down(&mut self) {
        if self.y < 2 {
            self.y += 1;
        }
    }
    
    fn go_left(&mut self) {
        if self.x > 0 {
            self.x -= 1;
        }
    }
    
    fn go_right(&mut self) {
        if self.x < 2 {
            self.x += 1;
        }
    }
}

struct KeypadV2 {
    x: u8,
    y: u8,
}

impl KeypadV2 {
    fn new() -> Self {
        Self {
            x: 0,
            y: 2,
        }
    }
}

impl Keypad for KeypadV2 {
    fn get_digit(&self) -> char {
        let str = self.x.to_string() + &self.y.to_string();
        
        match str.as_str() {
            "20" => '1',
            
            "11" => '2',
            "21" => '3',
            "31" => '4',
            
            "02" => '5',
            "12" => '6',
            "22" => '7',
            "32" => '8',
            "42" => '9',
            
            "13" => 'A',
            "23" => 'B',
            "33" => 'C',
            
            "24" => 'D',
            
            _ => '0',
        }
    }
    
    fn go_up(&mut self) {
        let top_limit = if self.x == 0 || self.x == 4 {
            2
        }
        else if self.x == 1 || self.x == 3 {
            1
        }
        else {
            0
        };
        
        if self.y > top_limit {
            self.y -= 1;
        }
    }
    
    fn go_down(&mut self) {
        let bottom_limit = if self.x == 0 || self.x == 4 {
            2
        }
        else if self.x == 1 || self.x == 3 {
            3
        }
        else {
            4
        };
        
        if self.y < bottom_limit {
            self.y += 1;
        }
    }
    
    fn go_left(&mut self) {
        let left_limit = if self.y == 0 || self.y == 4 {
            2
        }
        else if self.y == 1 || self.y == 3 {
            1
        }
        else {
            0
        };
        
        if self.x > left_limit {
            self.x -= 1;
        }
    }
    
    fn go_right(&mut self) {
        let right_limit = if self.y == 0 || self.y == 4 {
            2
        }
        else if self.y == 1 || self.y == 3 {
            3
        }
        else {
            4
        };
        
        if self.x < right_limit {
            self.x += 1;
        }
    }
    
}

fn instruction_to_digit(keypad: &mut impl Keypad, input: &str) -> char {
    for c in input.chars() {
        match c {
            'L' => keypad.go_left(),
            'R' => keypad.go_right(),
            'U' => keypad.go_up(),
            'D' => keypad.go_down(),
            _ => panic!("Pas une direction connue."),
        }
    }
    
    keypad.get_digit()
}

fn retreive_code(keypad: &mut impl Keypad, input: &str) -> String {
    let mut code = String::new();
    
    for line in input.lines() {
        code.push(instruction_to_digit(keypad, line));
    }
    
    code
}

fn retreive_code_v1(input: &str) -> String {
    let mut keypad = KeypadV1::new();
    retreive_code(&mut keypad, input)
}

fn retreive_code_v2(input: &str) -> String {
    let mut keypad = KeypadV2::new();
    retreive_code(&mut keypad, input)
} 

fn main() {
    println!("Advent of code");
    println!("Year 2016, day 02");
}

const EXAMPLE: &str = "ULL
RRDDD
LURDL
UUUUD";

const INPUT: &str = "LRRLLLRDRURUDLRDDURULRULLDLRRLRLDULUDDDDLLRRLDUUDULDRURRLDULRRULDLRDUDLRLLLULDUURRRRURURULURRULRURDLULURDRDURDRLRRUUDRULLLLLDRULDDLLRDLURRLDUURDLRLUDLDUDLURLRLDRLUDUULRRRUUULLRDURUDRUDRDRLLDLDDDLDLRRULDUUDULRUDDRLLURDDRLDDUDLLLLULRDDUDDUUULRULUULRLLDULUDLLLLURRLDLUDLDDLDRLRRDRDUDDDLLLLLRRLLRLUDLULLDLDDRRUDDRLRDDURRDULLLURLRDLRRLRDLDURLDDULLLDRRURDULUDUDLLLDDDLLRLDDDLLRRLLURUULULDDDUDULUUURRUUDLDULULDRDDLURURDLDLULDUDUDDDDD
RUURUDRDUULRDDLRLLLULLDDUDRDURDLRUULLLLUDUDRRUDUULRRUUDDURDDDLLLLRRUURULULLUDDLRDUDULRURRDRDLDLDUULUULUDDLUDRLULRUDRDDDLRRUUDRRLULUULDULDDLRLURDRLURRRRULDDRLDLLLRULLDURRLUDULDRDUDRLRLULRURDDRLUDLRURDDRDULUDLDLLLDRLRUDLLLLLDUDRDUURUDDUDLDLDUDLLDLRRDLULLURLDDUDDRDUDLDDUULDRLURRDLDLLUUDLDLURRLDRDDLLDLRLULUDRDLLLDRLRLLLDRUULUDLLURDLLUURUDURDDRDRDDUDDRRLLUULRRDRULRURRULLDDDUDULDDRULRLDURLUDULDLDDDLRULLULULUDLDDRDLRDRDLDULRRLRLRLLLLLDDDRDDULRDULRRLDLUDDDDLUDRLLDLURDLRDLDRDRDURRDUDULLLDLUDLDRLRRDDDRRLRLLULDRLRLLLLDUUURDLLULLUDDRLULRDLDLDURRRUURDUDRDLLLLLLDDDURLDULDRLLDUDRULRRDLDUDRLLUUUDULURRUR
URRRLRLLDDDRRLDLDLUDRDRDLDUDDDLDRRDRLDULRRDRRDUDRRUUDUUUDLLUURLRDRRURRRRUDRLLLLRRDULRDDRUDLRLUDURRLRLDDRRLUULURLURURUDRULDUUDLULUURRRDDLRDLUDRDLDDDLRUDURRLLRDDRDRLRLLRLRUUDRRLDLUDRURUULDUURDRUULDLLDRDLRDUUDLRLRRLUDRRUULRDDRDLDDULRRRURLRDDRLLLRDRLURDLDRUULDRRRLURURUUUULULRURULRLDDDDLULRLRULDUDDULRUULRRRRRLRLRUDDURLDRRDDULLUULLDLUDDDUURLRRLDULUUDDULDDUULLLRUDLLLRDDDLUUURLDUDRLLLDRRLDDLUDLLDLRRRLDDRUULULUURDDLUR
UULDRLUULURDRLDULURLUDULDRRDULULUDLLDURRRURDRLRLLRLDDLURRDLUUDLULRDULDRDLULULULDDLURULLULUDDRRULULULRDULRUURRRUDLRLURDRURDRRUDLDDUURDUUDLULDUDDLUUURURLRRDLULURDURRRURURDUURDRRURRDDULRULRRDRRDRUUUUULRLUUUDUUULLRRDRDULRDDULDRRULRLDLLULUUULUUDRDUUUDLLULDDRRDULUURRDUULLUUDRLLDUDLLLURURLUDDLRURRDRLDDURLDLLUURLDUURULLLRURURLULLLUURUUULLDLRDLUDDRRDDUUDLRURDDDRURUURURRRDLUDRLUULDUDLRUUDRLDRRDLDLDLRUDDDDRRDLDDDLLDLULLRUDDUDDDLDDUURLDUDLRDRURULDULULUDRRDLLRURDULDDRRDLUURUUULULRURDUUDLULLURUDDRLDDUDURRDURRUURLDLLDDUUDLLUURDRULLRRUUURRLLDRRDLURRURDULDDDDRDD
LLRUDRUUDUDLRDRDRRLRDRRUDRDURURRLDDDDLRDURDLRRUDRLLRDDUULRULURRRLRULDUURLRURLRLDUDLLDULULDUUURLRURUDDDDRDDLLURDLDRRUDRLDULLRULULLRURRLLURDLLLRRRRDRULRUDUDUDULUURUUURDDLDRDRUUURLDRULDUDULRLRLULLDURRRRURRRDRULULUDLULDDRLRRULLDURUDDUULRUUURDRRLULRRDLDUDURUUUUUURRUUULURDUUDLLUURDLULUDDLUUULLDURLDRRDDLRRRDRLLDRRLUDRLLLDRUULDUDRDDRDRRRLUDUDRRRLDRLRURDLRULRDUUDRRLLRLUUUUURRURLURDRRUURDRRLULUDULRLLURDLLULDDDLRDULLLUDRLURDDLRURLLRDRDULULDDRDDLDDRUUURDUUUDURRLRDUDLRRLRRRDUULDRDUDRLDLRULDL";

#[cfg(test)]
mod test {
    use crate::{
        EXAMPLE,
        INPUT,
        retreive_code_v1,
        retreive_code_v2,
    };
    
    #[test]
    fn test_example_v1() {
        assert_eq!(retreive_code_v1(EXAMPLE), "1985");
    }
    
    #[test]
    fn test_input_v1() {
        assert_eq!(retreive_code_v1(INPUT), "73597");
    }
    
    #[test]
    fn test_example_v2() {
        assert_eq!(retreive_code_v2(EXAMPLE), "5DB3");
    }
    
    #[test]
    fn test_input_v2() {
        assert_eq!(retreive_code_v2(INPUT), "A47DA");
    }
    
}















